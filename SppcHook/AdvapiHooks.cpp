#include "stdafx.h"

DECLARE_ORIGIN(CryptImportKey);

std::map<HSLC, std::pair<HCRYPTKEY, PSPPC_AUTH_RESULT>> SlcAuthMap;
CRITICAL_SECTION SlcAuthMapLock;

HCRYPTPROV g_CryptProv;
HCRYPTKEY g_SppsvcPubKey;
HCRYPTKEY g_ProxyPvk;

BYTE SppsvcPubKey[] = {
    0x06,0x02,0x00,0x00,0x00,0xA4,0x00,0x00,0x52,0x53,0x41,0x31,0x00,0x08,0x00,0x00,
    0x01,0x00,0x01,0x00,0xB5,0xB2,0x4C,0xA8,0x4D,0xDA,0x13,0xD8,0x48,0x63,0x93,0x6F,
    0x2F,0xE2,0xB4,0x04,0x9F,0xDC,0x9D,0x09,0x6C,0x4D,0x1B,0x9B,0x2D,0xE8,0xB7,0xB3,
    0xF0,0x97,0xDC,0x5E,0x9A,0x3B,0x5A,0x49,0x6C,0xBD,0xD9,0xE0,0x7A,0x7A,0x0E,0x9B,
    0xFF,0xD0,0x19,0x91,0x9F,0x2A,0x6F,0xBC,0xC9,0xC3,0x6F,0x7B,0xFD,0x32,0x0C,0xCE,
    0x06,0x85,0x98,0x48,0xD7,0xD6,0xBA,0x45,0xDC,0x56,0x73,0xE6,0x07,0xD6,0x10,0x4A,
    0x41,0x07,0xB8,0x80,0xCA,0x4C,0x28,0xE9,0x8E,0x9C,0xDA,0xD6,0xAF,0x48,0xB8,0x0C,
    0x71,0xBB,0x52,0x56,0x30,0xD1,0xF2,0x3E,0xCA,0x8F,0x39,0xC5,0x2C,0x6A,0x11,0x52,
    0xC1,0xAA,0xE0,0xCF,0xC8,0x34,0x66,0xC2,0x29,0x07,0xCB,0x8C,0x9E,0xD4,0xC5,0x3B,
    0x13,0x20,0x42,0xF0,0x82,0x23,0xFF,0xFE,0xF7,0x3E,0x32,0xF5,0xD1,0xE6,0xDE,0x4D,
    0x59,0x90,0x14,0x27,0xD6,0xFF,0xD2,0x95,0xC8,0x1A,0x3C,0x48,0xEF,0xD5,0xFC,0xD3,
    0x95,0x70,0x27,0xBF,0x19,0xE0,0xD3,0x6A,0xDC,0x1A,0x2B,0xF1,0x52,0x5F,0x0A,0x90,
    0xC2,0x30,0xA3,0x7F,0x3E,0xD5,0xD8,0xAA,0x21,0x36,0x86,0xEC,0xD8,0x16,0xD1,0xE7,
    0xD9,0xBB,0xC3,0x47,0x08,0xCD,0x33,0xE3,0xD7,0x0A,0x4A,0x0E,0x17,0xEC,0x70,0x01,
    0xD0,0x22,0x9C,0xBB,0x35,0xB3,0xC1,0xB4,0x35,0xBC,0xD5,0x22,0x5E,0x90,0x60,0x72,
    0x54,0xD5,0xDD,0xBB,0x12,0x9A,0x0A,0xC3,0x94,0x87,0xF8,0x8F,0x1E,0xF5,0x50,0xA4,
    0x8F,0x3D,0xC2,0x7E,0x7A,0x63,0xDE,0xF6,0x0B,0x3D,0x06,0x86,0x14,0x98,0x8E,0xB9,
    0xE8,0xDF,0x19,0xD8
};

BYTE ProxyPubKey[] = {
    0x06,0x02,0x00,0x00,0x00,0xA4,0x00,0x00,0x52,0x53,0x41,0x31,0x00,0x04,0x00,0x00,
    0x01,0x00,0x01,0x00,0xC9,0xD3,0xCC,0xEA,0xA8,0xDA,0x83,0x0E,0x84,0x82,0xB2,0xBE,
    0xBF,0x7C,0x1B,0x7E,0x65,0x64,0x08,0xD4,0xCA,0x45,0xAC,0x0D,0xF2,0xB9,0xB9,0x43,
    0x98,0xB6,0x63,0x6F,0x50,0xEC,0xB2,0xC3,0x34,0xCD,0x3C,0xD4,0x31,0x13,0x48,0x3E,
    0x8A,0x1D,0xDD,0xCB,0x86,0xB0,0x3A,0xEF,0xB4,0xB5,0xCE,0x74,0xD3,0x0C,0xDE,0xC1,
    0xF9,0xD6,0x28,0x42,0x2A,0xC7,0x03,0x60,0x3F,0xB5,0x0D,0x5A,0xC7,0x85,0x26,0x5F,
    0xAF,0x33,0x63,0xD4,0x4E,0x42,0xF5,0x7B,0x8D,0x43,0xA6,0x4F,0x61,0x5A,0x43,0x79,
    0x14,0xDC,0x58,0xE5,0x78,0xAD,0x32,0x4B,0x15,0x52,0xC5,0x44,0x36,0x52,0x7A,0x11,
    0x7C,0x48,0xC6,0x02,0xC4,0x60,0x4A,0xE2,0x38,0x3F,0x48,0x89,0x03,0xB5,0x46,0xC2,
    0x08,0x1F,0x23,0xC0
};

BYTE ProxyPvk[] = {
    0x07,0x02,0x00,0x00,0x00,0xA4,0x00,0x00,0x52,0x53,0x41,0x32,0x00,0x04,0x00,0x00,
    0x01,0x00,0x01,0x00,0xC9,0xD3,0xCC,0xEA,0xA8,0xDA,0x83,0x0E,0x84,0x82,0xB2,0xBE,
    0xBF,0x7C,0x1B,0x7E,0x65,0x64,0x08,0xD4,0xCA,0x45,0xAC,0x0D,0xF2,0xB9,0xB9,0x43,
    0x98,0xB6,0x63,0x6F,0x50,0xEC,0xB2,0xC3,0x34,0xCD,0x3C,0xD4,0x31,0x13,0x48,0x3E,
    0x8A,0x1D,0xDD,0xCB,0x86,0xB0,0x3A,0xEF,0xB4,0xB5,0xCE,0x74,0xD3,0x0C,0xDE,0xC1,
    0xF9,0xD6,0x28,0x42,0x2A,0xC7,0x03,0x60,0x3F,0xB5,0x0D,0x5A,0xC7,0x85,0x26,0x5F,
    0xAF,0x33,0x63,0xD4,0x4E,0x42,0xF5,0x7B,0x8D,0x43,0xA6,0x4F,0x61,0x5A,0x43,0x79,
    0x14,0xDC,0x58,0xE5,0x78,0xAD,0x32,0x4B,0x15,0x52,0xC5,0x44,0x36,0x52,0x7A,0x11,
    0x7C,0x48,0xC6,0x02,0xC4,0x60,0x4A,0xE2,0x38,0x3F,0x48,0x89,0x03,0xB5,0x46,0xC2,
    0x08,0x1F,0x23,0xC0,0xFF,0xE3,0x46,0xD0,0x1E,0x5E,0x23,0x7F,0x51,0x7B,0x32,0x11,
    0xB1,0x07,0x7C,0x49,0xF1,0xBF,0xAE,0xA2,0x33,0xBD,0x6C,0x1B,0x8C,0x47,0xD6,0xAC,
    0x89,0xE5,0xDF,0x63,0x1B,0x8C,0x72,0xC6,0xB3,0x32,0xEC,0xC1,0x32,0xA9,0xA0,0x2D,
    0x99,0x0E,0x01,0x80,0x5E,0x74,0x61,0x04,0x64,0x20,0x6C,0x9D,0x72,0xAC,0xFB,0x35,
    0x7E,0x12,0x49,0xCC,0x37,0x28,0x0E,0x60,0xE1,0x8B,0xAE,0x00,0x71,0x97,0x75,0x03,
    0x35,0xB2,0x73,0x07,0x60,0x9A,0x97,0x84,0x4D,0xE8,0xFA,0x3D,0x21,0x06,0x3D,0xB2,
    0x66,0x86,0x41,0x3A,0x20,0x9C,0x7B,0x06,0x32,0x76,0x7A,0x1F,0xDD,0xFA,0xFF,0xA5,
    0x33,0xF1,0x2C,0xFB,0x2B,0xC8,0x8A,0x69,0xDA,0xC9,0x4A,0xC9,0x3D,0x01,0x9C,0x5B,
    0xF8,0xC4,0xC6,0xF0,0x09,0x98,0x0A,0x0F,0x58,0x78,0xCF,0x76,0x8D,0xFD,0xAE,0x09,
    0xCE,0x8A,0x80,0xA2,0xBA,0x28,0x84,0x05,0x4F,0xCE,0xCF,0xA3,0x91,0x59,0x44,0x59,
    0x7F,0x25,0xD7,0xBF,0xDD,0x9D,0x73,0x9B,0x75,0x71,0x3D,0x2C,0xC7,0x98,0x17,0x78,
    0xC3,0xEC,0x60,0x85,0x25,0x87,0x6C,0x84,0xDC,0x2B,0x1D,0xFC,0x81,0xAC,0x4F,0xA8,
    0x7D,0x4C,0x2B,0x56,0x43,0x86,0x55,0xFD,0x4D,0x3E,0x1B,0x33,0xEA,0xA5,0x4A,0x76,
    0xD5,0xAD,0xA9,0x81,0x4C,0x3A,0x4C,0xC7,0xC3,0xF2,0xF7,0xF6,0x72,0x62,0x49,0xCE,
    0x61,0x7B,0xFA,0x83,0x92,0xD4,0x1C,0xEB,0xD0,0x21,0xFB,0x68,0x47,0x11,0xC4,0x7E,
    0x55,0x6D,0x3F,0x6F,0xAE,0x26,0x82,0xD8,0x98,0x96,0x7B,0x2C,0x8B,0xCB,0x01,0x78,
    0x45,0x1E,0xA7,0x5B,0xA6,0x9D,0xEE,0x38,0xB3,0x12,0x5E,0xE0,0xAF,0x1E,0x8F,0xC7,
    0xE3,0xF7,0x92,0xA2,0x41,0xD3,0x10,0x55,0xE9,0x74,0xAC,0xA1,0xCC,0xCF,0x77,0x87,
    0xD9,0x3B,0xD3,0xC9,0xC3,0x05,0x92,0x2B,0x2D,0xBD,0x52,0xD3,0x7A,0x49,0x2D,0xBA,
    0x9E,0xB2,0x62,0x3A,0x5A,0xA9,0x55,0xCD,0x80,0x2E,0x26,0x50,0xFE,0x3E,0x42,0x66,
    0xE7,0x50,0xF9,0x9D,0x8D,0x5E,0x46,0x8A,0x91,0x4C,0x7A,0xA7,0x96,0xF1,0x29,0x34,
    0x24,0x54,0x50,0x9C,0x4D,0xCB,0x70,0xED,0x61,0xCB,0xD6,0x20,0xBB,0xD6,0x33,0xC9,
    0xCE,0x1F,0x42,0x93,0xDB,0xC5,0xDC,0x2D,0xE0,0x89,0x4F,0xB7,0x29,0x22,0x27,0x93,
    0x43,0x56,0xA1,0x32,0x48,0xDB,0x89,0xB1,0x9B,0x57,0x3E,0x47,0xB3,0x51,0x68,0xC9,
    0xE3,0x4B,0x96,0xE7,0xCF,0x73,0x45,0xCE,0xAA,0x23,0x70,0x5E,0x38,0x0D,0x7D,0x20,
    0x5E,0x48,0xA0,0xA3,0x59,0x20,0xD6,0xF6,0x2A,0x34,0xF1,0xF1,0xEE,0x92,0xAB,0xE5,
    0xB2,0x0C,0x97,0x7A,0x20,0xE3,0x0F,0x48,0x7D,0x47,0x07,0x26,0x39,0xF0,0xA3,0xE6,
    0x2D,0xDC,0xA1,0x2C,0xB1,0x4C,0x4C,0x18,0x28,0x49,0x68,0x71,0x4E,0x79,0x31,0x6E,
    0x95,0x02,0x33,0x20
};

BOOL WINAPI HookCryptImportKey(
    _In_ HCRYPTPROV  hProv,
    _In_reads_bytes_(dwDataLen)  CONST BYTE* pbData,
    _In_ DWORD dwDataLen,
    _In_ HCRYPTKEY hPubKey,
    _In_ DWORD dwFlags,
    _Out_ HCRYPTKEY* phKey) {

    if (dwDataLen == sizeof(SppsvcPubKey) && RtlCompareMemory(pbData, SppsvcPubKey, dwDataLen) == dwDataLen) {
        printf("[+] MITM Attack.\n");
        pbData = ProxyPubKey;
    }

    return OriginCryptImportKey(
        hProv,
        pbData,
        dwDataLen,
        hPubKey,
        dwFlags,
        phKey
    );

}

VOID InitMITM() {
    InitializeCriticalSection(&SlcAuthMapLock);

    assert(CryptAcquireContextA(&g_CryptProv, nullptr, nullptr, CRYPT_NEWKEYSET | CRYPT_DELETEKEYSET, 0));
    assert(CryptImportKey(g_CryptProv, SppsvcPubKey, sizeof(SppsvcPubKey), 0, 0, &g_SppsvcPubKey));
    assert(CryptImportKey(g_CryptProv, ProxyPvk, sizeof(ProxyPvk), 0, 0, &g_ProxyPvk));
}
